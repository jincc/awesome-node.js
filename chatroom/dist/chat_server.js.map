{"version":3,"sources":["../libs/chat_server.js"],"names":["socketio","require","io","guestNumber","nickNames","nameUsed","currentRoom","listen","server","set","sockets","on","console","log","assignGuestName","socket","joinRoom","handleNameChangeAttempts","handleRoomJoining","handleMessageBroadcasting","emit","manager","rooms","handleClientDisconnection","exports","name","id","success","push","room","join","broadcast","to","text","usersInRoom","clients","userInRoomSummart","length","forEach","element","indexOf","message","preName","preIndex","index","leave","newRoom","nameIndex"],"mappings":"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","file":"chat_server.js","sourcesContent":["/*\n 分配昵称;\n 房间更换请求;\n 昵称更换请求;\n 发送聊天消息;\n 房间创建;\n 用户断开连接。\n*/\n\nvar socketio = require('socket.io')\n//socketid实例\nvar io\n\nvar guestNumber = 1\nvar nickNames = {}\nvar nameUsed = []\nvar currentRoom = {}\n\n\nfunction listen(server){\n    io = socketio.listen(server)\n    io.set('log level',1)\n    io.sockets.on('connection',socket=>{\n        console.log('connection')\n        //生成nickname\n        guestNumber = assignGuestName(socket,guestNumber,nickNames,nameUsed)\n        //进入lobby聊天室\n        joinRoom(socket,'Lobby')\n        //处理修改昵称\n        handleNameChangeAttempts(socket,nickNames,nameUsed)\n        //处理加入房间\n        handleRoomJoining(socket)\n        \n        //处理收到消息\n        handleMessageBroadcasting(socket)\n        socket.emit('rooms',io.sockets.manager.rooms)\n        socket.on('rooms',()=>{\n            socket.emit('rooms',io.sockets.manager.rooms)\n        })\n        //处理退出房间\n        handleClientDisconnection(socket)\n    })\n}\n\nexports.listen = listen;\n\n//为每个进入房间的用户设置名字\nfunction assignGuestName(socket,guestNumber,nickNames,nameUsed){\n    const name = 'Guest' + guestNumber\n    nickNames[socket.id] = name\n    socket.emit('nameResult',{\n        success:true,\n        name:name\n    })\n    nameUsed.push(name)\n    return guestNumber + 1\n}\n\nfunction joinRoom(socket,room){\n    //ENTER\n    socket.join(room)\n    currentRoom[socket.id] = room\n    socket.emit('joinResult',{room:room})\n    //通知其他人\n    socket.broadcast.to(room).emit('message',{\n        text:nickNames[socket.id] + 'has joined' + room + '.'\n    })\n    var usersInRoom = io.sockets.clients(room)\n    var userInRoomSummart = 'Current in room has:'\n    if(usersInRoom.length > 1){\n        usersInRoom.forEach(element => {\n            if (element.id != socket.id){\n                userInRoomSummart += nickNames[socket.id] \n                userInRoomSummart += ','\n            }\n        });\n    }else{\n        userInRoomSummart +='only u'\n    }\n    socket.emit('message',{text:userInRoomSummart})\n}\n\nfunction handleNameChangeAttempts(socket,nickNames,nameUsed){\n    //修改昵称\n    socket.on('nameAttempt',name=>{\n        //收到命令\n        if (name.indexOf('Guest') == 0){\n            socket.emit('nameResult',{\n                success:false,\n                message:'名称不能以Guest开头'\n            })\n        }else{\n            if (nameUsed.indexOf(name) == -1){\n                //删除之前的名字\n                const preName = nickNames[socket.id]\n                const preIndex = nameUsed.index(preName)\n                //同步nickname\n                nickNames[socket.id] = name\n                delete nameUsed[preIndex]\n                nameUsed.push(name)\n                socket.emit('nameResult',{\n                    success:true,\n                    name:name\n                })\n                socket.broadcast.to(currentRoom[socket.id]).emit('message',{\n                    text:`${preName} 已经更名了，现在叫做${name}`\n                })\n\n            }else{\n                socket.emit('nameResult',{\n                    success:false,\n                    message:'名称已经存在了'\n                }) \n            }\n        }\n    })\n}\n\nfunction handleMessageBroadcasting(socket){\n    socket.on('message',message=>{\n        socket.broadcast.to(message.room).emit('message',{\n            text:nickNames[socket.id] + ': '+ message.text\n        })\n    })\n}\n\n\nfunction handleRoomJoining(socket){\n    socket.on('join',room=>{\n        socket.leave(currentRoom[socket.id])\n        joinRoom(socket,room.newRoom)\n    })\n}\n\nfunction handleClientDisconnection(socket){\n    socket.on('disconnect',()=>{\n        const nameIndex = nameUsed.indexOf(nickNames[socket.id])\n        delete  nameUsed[nameIndex]\n        delete  nickNames[socket.id]\n    })\n}"]}